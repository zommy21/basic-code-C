/////////NguyenNhatMinh////////
#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORR(i,a,b) for(int i=a;i<=b;i++)

void Nhap(int a[],int n){
    FOR(i,0,n) scanf("%d",&a[i]);
}
void merge1(int a[], int b[], int c[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2], L2[n1], R2[n2], L3[n1], R3[n2];
    FOR(i,0,n1){
        L[i] = a[left + i];
        L2[i] = b[left + i];
        L3[i] = c[left + i];
    }
    FOR(j,0,n2) {
        R[j] = a[mid + 1 + j];
        R2[j] = b[mid + 1 + j];
        R3[j] = c[mid + 1 + j];
    }
    i = 0;  j = 0;  k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            a[k] = L[i];
            b[k] = L2[i];
            c[k] = L3[i];
            i++;
        } else {
            a[k] = R[j];
            b[k] = R2[j];
            c[k] = R3[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        a[k] = L[i];
        b[k] = L2[i];
        c[k] = L3[i];
        i++;
        k++;
    }
    while (j < n2) {
        a[k] = R[j];
        b[k] = R2[j];
        c[k] = R3[j];
        j++;
        k++;
    }
}

void mergeSort1(int a[], int b[], int c[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort1(a, b, c, left, mid);
        mergeSort1(a, b, c, mid + 1, right);
        merge1(a, b, c, left, mid, right);
    }
}
void merge2(int a[], int b[], int c[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2], L2[n1], R2[n2], L3[n1], R3[n2];
    FOR(i,0,n1) {
        L[i] = a[left + i];
        L2[i] = b[left + i];
        L3[i] = c[left + i];
    }
    FOR(j,0,n2) {
        R[j] = a[mid + 1 + j];
        R2[j] = b[mid + 1 + j];
        R3[j] = c[mid + 1 + j];
    }
    i = 0;    j = 0;    k = left;
    while (i < n1 && j < n2) {
        if (L[i] >= R[j]) {
            a[k] = L[i];
            b[k] = L2[i];
            c[k] = L3[i];
            i++;
        } else {
            a[k] = R[j];
            b[k] = R2[j];
            c[k] = R3[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        a[k] = L[i];
        b[k] = L2[i];
        c[k] = L3[i];
        i++;
        k++;
    }
    while (j < n2) {
        a[k] = R[j];
        b[k] = R2[j];
        c[k] = R3[j];
        j++;
        k++;
    }
}

void mergeSort2(int a[], int b[], int c[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort2(a, b, c, left, mid);
        mergeSort2(a, b, c, mid + 1, right);
        merge2(a, b, c, left, mid, right);
    }
}

void Sol() {
    int n, val[100001], a[100001], cnt[100001], d = 0, b[100001], c[100001];
    scanf("%d", &n);
    Nhap(a,n);
    FOR(i,0,n) b[i] = i;
    FOR(i,0,n) cnt[i] = 0;
    mergeSort1(a, b, cnt, 0, n - 1);
    val[0] = a[0];
    c[0] = b[0];
    FOR(i,0,n) {
        if (a[i] > val[d]) {
            val[++d] = a[i];
            c[d] = b[i];
        }
        cnt[d]++;
    }
    mergeSort1(cnt, val, c, 0, d);
    FORR(i,0,d) a[i] = 0;
    FORR(i,0,d) a[cnt[i]]++;
    int res = 0;
    FOR(i,0,d) {
        if (cnt[i + 1] == cnt[i] && res == 0) {
            mergeSort2(c, val, cnt, i, i + a[cnt[i]] - 1);
            res = 1;
        } else
        if (cnt[i + 1] != cnt[i]) {
            res = 0;
            }
    }
    for (int i = d; i >= 0; i--) {
        FOR(j,0,cnt[i]) {
            printf("%d ", val[i]);
        }
    }
}
int main() {
    //freopen("input.txt","r",stdin);
   	//freopen("output.txt","w",stdout);
    int t;
    scanf("%d", &t);
    while (t--) {
        Sol();
        printf("\n");
    }
}